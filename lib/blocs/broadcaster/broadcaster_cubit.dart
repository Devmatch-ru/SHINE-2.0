import 'dart:async';
import 'package:camera/camera.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import '../../utils/broadcaster_manager.dart';
import 'broadcaster_state.dart';

class BroadcasterCubit extends Cubit<BroadcasterState> {
  final String receiverUrl;
  final RTCVideoRenderer _localRenderer = RTCVideoRenderer();
  late final BroadcasterManager _manager;
  Timer? _captureTimer;
  Timer? _reconnectTimer;
  int _reconnectAttempts = 0;
  static const int maxReconnectAttempts = 5;

  BroadcasterCubit({required this.receiverUrl})
      : super(const BroadcasterInitial());

  RTCVideoRenderer get localRenderer {
    if (state is BroadcasterInitial) {
      throw Exception('Renderer not initialized yet');
    }
    return _localRenderer;
  }

  bool get isFlashOn => _manager.isFlashOn;
  List<String> get debugMessages => _manager.messages;

  Future<void> initialize() async {
    try {
      emit(const BroadcasterInitial()); // Make sure we're in initial state
      await _localRenderer.initialize();

      _manager = BroadcasterManager(
        onStateChange: _handleStateChange,
        onError: _handleError,
        onMediaCaptured: _handleMediaCaptured,
        onCommandReceived: _handleCommandReceived,
        onQualityChanged: _handleQualityChanged,
        onConnectionFailed: _handleConnectionFailed,
      );

      await _manager.init();

      if (_manager.localStream != null) {
        _localRenderer.srcObject = _manager.localStream;
        emit(BroadcasterReady(
          stream: _manager.localStream!,
          connectedReceivers: const [],
        ));
      }

      await startBroadcasting();
    } catch (e) {
      _handleError(e.toString());
    }
  }

  Future<void> startBroadcasting() async {
    try {
      await _manager.startBroadcast(receiverUrl);

      if (_manager.isBroadcasting && _manager.localStream != null) {
        _reconnectAttempts =
            0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        _reconnectTimer?.cancel();

        emit(BroadcasterReady(
          stream: _manager.localStream!,
          connectedReceivers: _manager.connectedReceivers,
        ));
      }
    } catch (e) {
      _handleError(e.toString());
    }
  }

  void _handleConnectionFailed() {
    if (state is BroadcasterError) return;

    _addMessage('Connection failed, attempting to reconnect...');

    if (_reconnectAttempts < maxReconnectAttempts) {
      _reconnectAttempts++;

      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      final delay = Duration(seconds: _reconnectAttempts * 2);

      _reconnectTimer?.cancel();
      _reconnectTimer = Timer(delay, () async {
        _addMessage(
            'Attempting reconnection (attempt $_reconnectAttempts of $maxReconnectAttempts)');
        await startBroadcasting();
      });
    } else {
      _addMessage('Max reconnection attempts reached');
      emit(BroadcasterError(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ $maxReconnectAttempts –ø–æ–ø—ã—Ç–æ–∫'));
    }
  }

  void _handleError(String error) {
    _addMessage('Error occurred: $error');

    if (!error.contains('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è,
      // –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      _handleConnectionFailed();
    }

    emit(BroadcasterError(error));
  }

  void _handleStateChange() {
    if (state is BroadcasterError) return;

    final currentStream = _manager.localStream;
    if (currentStream == null) return;

    _localRenderer.srcObject = currentStream;

    if (_manager.isBroadcasting) {
      _reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      _reconnectTimer?.cancel();

      if (state is BroadcasterTimer) {
        final currentState = state as BroadcasterTimer;
        emit(BroadcasterTimer(
          stream: currentStream,
          seconds: currentState.timerSeconds,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
          isVideoMode: state.isVideoMode,
        ));
      } else if (state.isRecording || _manager.isRecording) {
        emit(BroadcasterRecording(
          stream: currentStream,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      } else {
        emit(BroadcasterReady(
          stream: currentStream,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
          isVideoMode: state.isVideoMode,
        ));
      }
    } else {
      emit(BroadcasterReady(
        stream: currentStream,
        connectedReceivers: const [],
        isPowerSaveMode: _manager.isPowerSaveMode,
        isVideoMode: state.isVideoMode,
      ));
    }
  }

  void _handleMediaCaptured(XFile media) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞ –º–µ–¥–∏–∞
    if (_manager.localStream != null) {
      emit(BroadcasterReady(
        stream: _manager.localStream!,
        connectedReceivers: _manager.connectedReceivers,
        isPowerSaveMode: _manager.isPowerSaveMode,
        isVideoMode: state.isVideoMode,
      ));
    }
  }

  void _handleCommandReceived(String command) {
    if (_manager.localStream == null) return;

    String message;
    switch (command) {
      case 'capture_photo':
        message = '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ';
        _executePhotoCommand();
        break;
      case 'toggle_video':
        message = '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å';
        _executeVideoCommand();
        break;
      case 'toggle_flashlight':
        message = '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–∞—Ä–∏–∫';
        _executeFlashlightCommand();
        break;
      case 'start_timer':
        message = '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä';
        _executeTimerCommand();
        break;
      default:
        message = '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: $command';
    }

    emit(BroadcasterCommandReceived(
      stream: _manager.localStream!,
      message: message,
      connectedReceivers: _manager.connectedReceivers,
      isPowerSaveMode: _manager.isPowerSaveMode,
      isVideoMode: state.isVideoMode,
    ));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    Future.delayed(const Duration(seconds: 3), () {
      if (_manager.localStream != null) {
        emit(BroadcasterReady(
          stream: _manager.localStream!,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
          isVideoMode: state.isVideoMode,
        ));
      }
    });
  }

  Future<void> _executePhotoCommand() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—ä—ë–º–∫–∏
      if (_manager.localStream != null) {
        emit(BroadcasterCommandReceived(
          stream: _manager.localStream!,
          message: 'üì∏ –î–µ–ª–∞–µ–º —Ñ–æ—Ç–æ...',
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      }

      await _manager.capturePhoto();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å—ä—ë–º–∫–µ
      if (_manager.localStream != null) {
        emit(BroadcasterCommandReceived(
          stream: _manager.localStream!,
          message: '‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!',
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        Future.delayed(const Duration(seconds: 3), () {
          if (_manager.localStream != null) {
            emit(BroadcasterReady(
              stream: _manager.localStream!,
              connectedReceivers: _manager.connectedReceivers,
              isPowerSaveMode: _manager.isPowerSaveMode,
            ));
          }
        });
      }
    } catch (e) {
      emit(BroadcasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ —Ñ–æ—Ç–æ: $e'));
    }
  }

  Future<void> _executeVideoCommand() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
      final wasRecording = state.isRecording || _manager.isRecording;

      if (wasRecording) {
        _addMessage('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ...');
        await _manager.stopVideoRecording();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ Ready
        if (_manager.localStream != null) {
          emit(BroadcasterReady(
            stream: _manager.localStream!,
            connectedReceivers: _manager.connectedReceivers,
            isPowerSaveMode: _manager.isPowerSaveMode,
          ));
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
        emit(BroadcasterCommandReceived(
          stream: _manager.localStream!,
          message: 'üìπ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      } else {
        _addMessage('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ...');
        await _manager.startVideoRecording();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Recording
        if (_manager.localStream != null) {
          emit(BroadcasterRecording(
            stream: _manager.localStream!,
            connectedReceivers: _manager.connectedReceivers,
            isPowerSaveMode: _manager.isPowerSaveMode,
          ));
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏
        emit(BroadcasterCommandReceived(
          stream: _manager.localStream!,
          message: 'üî¥ –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–∞',
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      Future.delayed(const Duration(seconds: 2), () {
        if (_manager.localStream != null) {
          if (_manager.isRecording) {
            emit(BroadcasterRecording(
              stream: _manager.localStream!,
              connectedReceivers: _manager.connectedReceivers,
              isPowerSaveMode: _manager.isPowerSaveMode,
            ));
          } else {
            emit(BroadcasterReady(
              stream: _manager.localStream!,
              connectedReceivers: _manager.connectedReceivers,
              isPowerSaveMode: _manager.isPowerSaveMode,
            ));
          }
        }
      });
    } catch (e) {
      emit(BroadcasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–¥–µ–æ: $e'));
    }
  }

  void _addMessage(String message) {
    print('BroadcasterCubit: $message');
  }

  Future<void> _executeFlashlightCommand() async {
    try {
      await _manager.toggleFlash();

      // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–∞
      if (_manager.localStream != null) {
        final status = _manager.isFlashOn ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
        emit(BroadcasterCommandReceived(
          stream: _manager.localStream!,
          message: 'üî¶ –§–æ–Ω–∞—Ä–∏–∫ $status',
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        Future.delayed(const Duration(seconds: 2), () {
          if (_manager.localStream != null) {
            emit(BroadcasterReady(
              stream: _manager.localStream!,
              connectedReceivers: _manager.connectedReceivers,
              isPowerSaveMode: _manager.isPowerSaveMode,
            ));
          }
        });
      }
    } catch (e) {
      emit(BroadcasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–∞: $e'));
    }
  }

  Future<void> _executeTimerCommand() async {
    try {
      await startTimerCapture();
    } catch (e) {
      emit(BroadcasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞: $e'));
    }
  }

  Future<void> toggleRecording() async {
    if (!_manager.isBroadcasting) {
      emit(BroadcasterError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–ª—É—à–∞—Ç–µ–ª—é'));
      return;
    }

    try {
      if (state.isRecording || _manager.isRecording) {
        await _manager.stopVideoRecording();
        emit(BroadcasterReady(
          stream: _manager.localStream!,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      } else {
        await _manager.startVideoRecording();
        emit(BroadcasterRecording(
          stream: _manager.localStream!,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      }
    } catch (e) {
      emit(BroadcasterError(e.toString()));
    }
  }

  Future<void> capturePhoto() async {
    if (!_manager.isBroadcasting) {
      emit(BroadcasterError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–ª—É—à–∞—Ç–µ–ª—é'));
      return;
    }

    try {
      await _manager.capturePhoto();
    } catch (e) {
      emit(BroadcasterError(e.toString()));
    }
  }

  Future<void> startTimerCapture() async {
    if (state.isTimerActive || state.isRecording) return;

    const totalSeconds = 3;
    for (int i = totalSeconds; i > 0; i--) {
      emit(BroadcasterTimer(
        stream: _manager.localStream!,
        seconds: i,
        connectedReceivers: _manager.connectedReceivers,
        isPowerSaveMode: _manager.isPowerSaveMode,
      ));
      await Future.delayed(const Duration(seconds: 1));
    }

    await capturePhoto();
    emit(BroadcasterReady(
      stream: _manager.localStream!,
      connectedReceivers: _manager.connectedReceivers,
      isPowerSaveMode: _manager.isPowerSaveMode,
    ));
  }

  void _handleQualityChanged(String quality) {
    if (_manager.localStream == null) return;

    final message = '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${_getQualityDisplayName(quality)}';

    emit(BroadcasterCommandReceived(
      stream: _manager.localStream!,
      message: message,
      connectedReceivers: _manager.connectedReceivers,
      isPowerSaveMode: _manager.isPowerSaveMode,
    ));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    Future.delayed(const Duration(seconds: 2), () {
      if (_manager.localStream != null) {
        emit(BroadcasterReady(
          stream: _manager.localStream!,
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
        ));
      }
    });
  }

  String _getQualityDisplayName(String quality) {
    switch (quality) {
      case 'low':
        return '–ù–∏–∑–∫–æ–µ (640x360, 15fps)';
      case 'medium':
        return '–°—Ä–µ–¥–Ω–µ–µ (1280x720, 30fps)';
      case 'high':
        return '–í—ã—Å–æ–∫–æ–µ (1920x1080, 25fps)';
      default:
        return quality;
    }
  }

  @override
  Future<void> close() async {
    _reconnectTimer?.cancel();
    _captureTimer?.cancel();
    await _localRenderer.dispose();
    await _manager.dispose();
    super.close();
  }

  Future<void> disconnect() async {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      _captureTimer?.cancel();
      _reconnectTimer?.cancel();

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
      await _manager.stopBroadcast();

      // –û—á–∏—â–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
      _localRenderer.srcObject = null;

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      await _localRenderer.dispose();
      await _manager.dispose();

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      emit(const BroadcasterInitial());
    } catch (e) {
      _addMessage('Error during disconnect: $e');
      emit(BroadcasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: $e'));
    }
  }

  Future<void> setPhotoMode() async {
    if (_manager.localStream == null) return;

    // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
    if (state.isRecording) {
      await _manager.stopVideoRecording();
    }

    emit(BroadcasterReady(
      stream: _manager.localStream!,
      connectedReceivers: _manager.connectedReceivers,
      isPowerSaveMode: _manager.isPowerSaveMode,
      isVideoMode: false,
    ));
  }

  Future<void> setVideoMode() async {
    if (_manager.localStream == null) return;

    emit(BroadcasterReady(
      stream: _manager.localStream!,
      connectedReceivers: _manager.connectedReceivers,
      isPowerSaveMode: _manager.isPowerSaveMode,
      isVideoMode: true,
    ));
  }

  Future<void> toggleFlash() async {
    try {
      await _manager.toggleFlash();

      if (_manager.localStream != null) {
        final status = _manager.isFlashOn ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
        emit(BroadcasterCommandReceived(
          stream: _manager.localStream!,
          message: 'üî¶ –§–æ–Ω–∞—Ä–∏–∫ $status',
          connectedReceivers: _manager.connectedReceivers,
          isPowerSaveMode: _manager.isPowerSaveMode,
          isVideoMode: state.isVideoMode,
        ));

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        Future.delayed(const Duration(seconds: 2), () {
          if (_manager.localStream != null) {
            emit(BroadcasterReady(
              stream: _manager.localStream!,
              connectedReceivers: _manager.connectedReceivers,
              isPowerSaveMode: _manager.isPowerSaveMode,
              isVideoMode: state.isVideoMode,
            ));
          }
        });
      }
    } catch (e) {
      emit(BroadcasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–∞: $e'));
    }
  }
}
